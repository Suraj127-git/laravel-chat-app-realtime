name: Laravel CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  laravel-tests:
    runs-on: ubuntu-latest
    
    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: laravel_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql
        coverage: xdebug
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"
    
    - name: Install Composer Dependencies
      run: |
        composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
    
    - name: Install NPM Dependencies
      run: npm ci
    
    - name: Generate Application Key
      run: php artisan key:generate
    
    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache
    
    - name: Configure Database
      env:
        DATABASE_URL: mysql://root@127.0.0.1:3306/laravel_test
      run: |
        php artisan config:clear
        php artisan migrate:fresh --seed
    
    - name: Build Frontend Assets
      run: npm run build
    
    - name: Run Pest Tests
      run: |
        php artisan test --parallel
    
    # Optional: Code Coverage Report
    - name: Generate Coverage Report
      run: php artisan test --coverage --min=80
  
  deploy-staging:
    needs: laravel-tests
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Staging
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /path/to/staging/project
          git pull origin develop
          composer install --no-dev --optimize-autoloader
          npm ci
          npm run build
          php artisan migrate --force
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
          php artisan horizon:terminate
          supervisorctl restart laravel-worker:*
  
  deploy-production:
    needs: laravel-tests
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Production Deployment
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /path/to/production/project
          php artisan down --retry=60
          git pull origin main
          composer install --no-dev --optimize-autoloader
          npm ci
          npm run build
          php artisan migrate --force
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache
          php artisan horizon:terminate
          supervisorctl restart laravel-worker:*
          php artisan up
          
          # Optional: Slack or Discord Deployment Notification
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Deployment to Production completed successfully!"}' ${{ secrets.DEPLOYMENT_NOTIFICATION_WEBHOOK }}

  # Optional: Performance and Security Scanning
  security-scan:
    needs: laravel-tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Psalm Static Analysis
      run: |
        composer global require vimeo/psalm
        psalm --output-format=github
    
    - name: Run Security Checks
      run: |
        composer global require enlightn/security-checker
        security-checker security:check